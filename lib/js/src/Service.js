// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Fetch = require("bs-fetch/lib/js/src/Fetch.js");
var Config$SwpSdk = require("./Config.js");

((require("cross-fetch/polyfill")));

function handleResponse(res) {
  return res.json().then((function (body) {
                  var error = body.error;
                  if (error == null) {
                    return Promise.resolve(body.data);
                  } else {
                    var match = error.message;
                    var message = (match == null) ? res.statusText : match;
                    return Promise.reject({
                                statusCode: res.status,
                                code: error.code,
                                message: message,
                                fieldErrors: error.field_errors
                              });
                  }
                })).catch((function (err) {
                return Promise.reject(err);
              }));
}

function handleError($staropt$star, errorResponse) {
  var debug = $staropt$star ? $staropt$star[0] : false;
  if (debug) {
    var errorLog = JSON.stringify(errorResponse);
    if (errorLog !== undefined) {
      console.log(errorLog);
    }
    
  }
  return Promise.reject({
              statusCode: errorResponse.statusCode,
              code: errorResponse.code,
              message: errorResponse.message,
              fieldErrors: errorResponse.fieldErrors
            });
}

function handleRequest(debug, req) {
  var partial_arg = /* Some */[debug];
  return req.then(handleResponse).catch((function (param) {
                return handleError(partial_arg, param);
              }));
}

function get(headers, $staropt$star, $staropt$star$1, path) {
  var debug = $staropt$star ? $staropt$star[0] : false;
  var sandbox = $staropt$star$1 ? $staropt$star$1[0] : false;
  return handleRequest(debug, fetch((
                  sandbox ? Config$SwpSdk.sandboxHost : Config$SwpSdk.host
                ) + path, Fetch.RequestInit[/* make */0](/* None */0, /* Some */[headers], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* () */0)));
}

function post(headers, body, $staropt$star, $staropt$star$1, path) {
  var debug = $staropt$star ? $staropt$star[0] : false;
  var sandbox = $staropt$star$1 ? $staropt$star$1[0] : false;
  var optionBody = JSON.stringify(body);
  var strBody = optionBody !== undefined ? optionBody : "";
  return handleRequest(debug, fetch((
                  sandbox ? Config$SwpSdk.sandboxHost : Config$SwpSdk.host
                ) + path, Fetch.RequestInit[/* make */0](/* Some */[/* Post */2], /* Some */[headers], /* Some */[strBody], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* () */0)));
}

var host = Config$SwpSdk.host;

var sandboxHost = Config$SwpSdk.sandboxHost;

exports.host = host;
exports.sandboxHost = sandboxHost;
exports.handleResponse = handleResponse;
exports.handleError = handleError;
exports.handleRequest = handleRequest;
exports.get = get;
exports.post = post;
/*  Not a pure module */
